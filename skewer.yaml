title: Skupper local client
subtitle: Connect to a remote service from a local process
github_actions_url: https://github.com/ssorj/skupper-example-local-client/actions/workflows/main.yaml
overview: |
  This example is a multi-service HTTP application deployed across a
  Kubernetes cluster and a bare-metal host or VM.

  It contains two services:

  * A backend service that exposes an `/api/hello` endpoint.  It
    returns greetings of the form `Hi, <your-name>.  I am <my-name>
    (<pod-name>)`.

  * A frontend service that sends greetings to the backend and
    fetches new greetings in response.

  The backend runs on Kubernetes and the frontend runs on your local
  machine.  Skupper enables the frontend to connect to the backend
  using a dedicated service network.

  <!-- <img src="images/entities.svg" width="640"/> -->
prerequisites: |
  * A working installation of Docker ([installation
    guide][install-docker]) or Podman ([installation
    guide][install-podman])

  * The `kubectl` command-line tool, version 1.15 or later
    ([installation guide][install-kubectl])

  * Access to a Kubernetes cluster, from [any provider you
    choose][kube-providers]

  [install-docker]: https://docs.docker.com/engine/install/
  [install-podman]: https://podman.io/getting-started/installation
  [install-kubectl]: https://kubernetes.io/docs/tasks/tools/install-kubectl/
  [kube-providers]: https://skupper.io/start/kubernetes.html#providers
sites:
  hello-world:
    kubeconfig: ~/.kube/config-hello-world
    namespace: hello-world
steps:
  - standard: install_the_skupper_command_line_tool
  - title: Access your Kubernetes cluster
    preamble: |
      The procedure for accessing a Kubernetes cluster varies by
      provider. [Find the instructions for your chosen
      provider][kube-providers] and use them to authenticate and
      configure access.

      [kube-providers]: https://skupper.io/start/kubernetes.html#providers
  - title: Set up your Kubernetes namespace
    preamble: |
      Use `kubectl create namespace` to create the namespace you wish
      to use (or use an existing namespace).  Use `kubectl config
      set-context` to set the current namespace for your session.
    commands:
      hello-world:
        - run: kubectl create namespace hello-world
          output: namespace/hello-world created
        - run: kubectl config set-context --current --namespace hello-world
          output: Context "minikube" modified.
  - title: Install Skupper in your Kubernetes namespace
    preamble: |
      The `skupper init` command installs the Skupper router and service
      controller in the current namespace.

      **Note:** If you are using Minikube, [you need to start `minikube
      tunnel`][minikube-tunnel] before you install Skupper.

      [minikube-tunnel]: https://skupper.io/start/minikube.html#running-minikube-tunnel
    commands:
      hello-world:
        - run: skupper init
          output: |
            Waiting for LoadBalancer IP or hostname...
            Skupper is now installed in namespace 'hello-world'.  Use 'skupper status' to get more information.
  - title: Deploy and expose the backend on Kubernetes
    preamble: |
      Use `kubectl create deployment` to deploy the backend service
      in `hello-world`.
    commands:
      hello-world:
        - run: kubectl create deployment backend --image quay.io/skupper/hello-world-backend
          output: deployment.apps/backend created
        - await: deployment/backend
        - run: skupper expose deployment/backend --port 8080
          output: deployment backend exposed as backend
  - title: Deploy and expose the frontend on your local machine
    preamble: |
      Use the `skupper gateway init` command to set up a gateway
      router on your local machine.  Use the `--type docker` option to
      run the router in a Docker container.

      Use the `skupper gateway forward` command to make the backend
      service available on local port 8081.

      Run the frontend service on your local machine.  Configure
      it to connect to the backend service at local port 8081.
    commands:
      hello-world:
        - await: service/backend
        - run: skupper gateway init --type docker
          output: |
            Skupper gateway: 'fancypants-jross'. Use 'skupper gateway status' to get more information.
        - run: sleep 2
          apply: test
        - run: skupper gateway forward backend 8081
          output: 2022/08/29 16:59:05 CREATE io.skupper.router.tcpListener fancypants-jross-ingress-backend:8080 map[address:backend:8080 name:fancypants-jross-ingress-backend:8080 port:8081 siteId:28b1dbd3-c4cd-4e49-a955-83328155ab53]
        - run: (cd frontend && python python/main.py --host localhost --port 8080 --backend http://localhost:8081) &
          output: |
            INFO:     Started server process [1710891]
            INFO:     Waiting for application startup.
            INFO:     Application startup complete.
            INFO:     Uvicorn running on http://localhost:8080 (Press CTRL+C to quit)
  - title: Test the application
    preamble: |
      Now we're ready to try it out.  Use `curl` or a similar tool to
      request the frontend `/api/health` endpoint.
    commands:
      hello-world:
        - run: curl http://localhost:8080/api/health
          apply: readme
          output: OK
        - run: curl --fail --verbose --retry 60 --retry-connrefused --retry-delay 2 http://localhost:8080/api/health
          apply: test
    postamble: |
      If everything is in order, you can now access the web interface by
      navigating to `http://localhost:8080/` in your browser.
  - standard: accessing_the_web_console
  - standard: cleaning_up
    commands:
      hello-world:
        - run: kill $(ps -ef | grep 'python python/main\.py' | awk '{print $2}') 2> /dev/null
        - run: skupper gateway delete
        - run: skupper delete
        - run: kubectl delete service/backend
        - run: kubectl delete deployment/backend
