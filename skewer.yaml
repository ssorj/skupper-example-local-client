title: Skupper local frontend
subtitle: Connect to a remote service from a local process
github_actions_url: https://github.com/ssorj/skupper-example-hello-world-docker/actions/workflows/main.yaml
overview: |
  This example is a very simple multi-service HTTP application
  deployed across a Kubernetes cluster and a bare-metal host or VM.

  It contains two services:

  * A backend service that exposes an `/api/hello` endpoint.  It
    returns greetings of the form `Hi, <your-name>.  I am <my-name>
    (<pod-name>)`.

  * A frontend service that sends greetings to the backend and
    fetches new greetings in response.

# With Skupper, you can run the backend as a container on your local
# machine and the frontend in Kubernetes and maintain connectivity
# between the two services without exposing the backend to the public
# internet.

# <!-- <img src="images/entities.svg" width="640"/> -->
prerequisites: |
  * A working installation of Docker ([installation
    guide][install-docker]) or Podman ([installation
    guide][install-podman])

  * The `kubectl` command-line tool, version 1.15 or later
    ([installation guide][install-kubectl])

  * Access to a Kubernetes cluster, from [any provider you
    choose][kube-providers]

  [install-docker]: https://docs.docker.com/engine/install/
  [install-podman]: https://podman.io/getting-started/installation
  [install-kubectl]: https://kubernetes.io/docs/tasks/tools/install-kubectl/
  [kube-providers]: https://skupper.io/start/index.html#prerequisites
sites:
  hello-world:
    kubeconfig: ~/.kube/config-hello-world
    namespace: hello-world
steps:
  - standard: install_the_skupper_command_line_tool
  - title: Access your Kubernetes cluster
    preamble: |
      The procedure for accessing a Kubernetes cluster varies by
      provider. Find the instructions for your chosen provider and use
      them to authenticate and configure access for each console
      session.  See the following links for more information:

      * [Minikube](https://skupper.io/start/minikube.html)
      * [Amazon Elastic Kubernetes Service (EKS)](https://skupper.io/start/eks.html)
      * [Azure Kubernetes Service (AKS)](https://skupper.io/start/aks.html)
      * [Google Kubernetes Engine (GKE)](https://skupper.io/start/gke.html)
      * [IBM Kubernetes Service](https://skupper.io/start/ibmks.html)
      * [OpenShift](https://skupper.io/start/openshift.html)
      * [More providers](https://kubernetes.io/partners/#kcsp)
  - title: Set up your Kubernetes namespace
    preamble: |
      Use `kubectl create namespace` to create the namespace you wish
      to use (or use an existing namespace).  Use `kubectl config
      set-context` to set the current namespace for your session.
    commands:
      hello-world:
        - run: kubectl create namespace hello-world
          output: namespace/hello-world created
        - run: kubectl config set-context --current --namespace hello-world
          output: Context "minikube" modified.
  - title: Install Skupper in your Kubernetes namespace
    preamble: |
      The `skupper init` command installs the Skupper router and service
      controller in the current namespace.

      **Note:** If you are using Minikube, [you need to start `minikube
      tunnel`][minikube-tunnel] before you install Skupper.

      [minikube-tunnel]: https://skupper.io/start/minikube.html#running-minikube-tunnel
    commands:
      hello-world:
        - run: skupper init
          output: |
            Waiting for LoadBalancer IP or hostname...
            Skupper is now installed in namespace 'hello-world'.  Use 'skupper status' to get more information.
  - title: Deploy and expose the backend on Kubernetes
    preamble: |
      Use `kubectl create deployment` to deploy the backend service
      in `hello-world`.
    commands:
      hello-world:
        - run: kubectl create deployment backend --image quay.io/skupper/hello-world-backend
          output: deployment.apps/backend created
        - await: deployment/backend
        - run: skupper expose deployment/backend --port 8080
          output: XXX
  - title: Deploy and expose the frontend on your local machine
    preamble: |
      Use the `skupper gateway forward` command to make the backend
      service available on a local port.

      Run the frontend service on your local machine.  XXX Configure
      it to get the backend service at the localhost location.
    commands:
      hello-world:
        - await: service/backend
        - run: skupper gateway init --type docker
        - run: sleep 2 # XXX Ugh
          apply: test
        - run: skupper gateway forward backend 8081
        - run: cd frontend && python python/main.py --port 8080 --backend http://localhost:8081 &
        - run: sleep 86400
  - title: Test the application
    preamble: |
      Now we're ready to try it out.  Use `curl` or a similar tool to
      request the frontend `/api/health` endpoint.
    commands:
      hello-world:
        - run: curl http://localhost:8080/api/health
          apply: readme
          output: OK
        - run: curl --fail --verbose --retry 60 --retry-connrefused --retry-delay 2 http://localhost:8080/api/health
          apply: test
    postamble: |
      If everything is in order, you can now access the web interface by
      navigating to `http://localhost:8080/` in your browser.
  - standard: accessing_the_web_console
  - standard: cleaning_up
    # XXX Killing the frontend process
    commands:
      hello-world:
        - run: skupper gateway delete
        - run: skupper delete
        - run: kubectl delete service/backend
        - run: kubectl delete deployment/backend
